import unittest
from backtest.broker.account import Account, Position
from backtest.broker.order import OrderSide, Order, OrderType


class TestAccount(unittest.TestCase):
    def setUp(self):
        self.account = Account(100000.0)
    
    def test_account_init(self):
        self.assertEqual(self.account.get_balance(), 100000.0)
        self.assertEqual(self.account.get_buying_power(), 100000.0)
        self.assertEqual(len(self.account.list_open_positions()), 0)
        self.assertEqual(len(self.account.list_closed_positions()), 0)
     
    def test_position_init(self):
        position = Position(symbol='AAPL', side=OrderSide.LONG, quantity=100, price=102.2)
        self.assertEqual(position.get_value(105), 10500.0)
        self.assertEqual(position.get_realized_profit(), 0.0)
        self.assertEqual(position.get_unrealized_profit(), 0.0)
        self.assertEqual(position.get_avg_price(), 102.2)
        self.assertEqual(position.get_symbol(), 'AAPL')
        self.assertEqual(position.get_side(), OrderSide.LONG)
    
    def test_position_update_avg_price(self):
        position = Position(symbol='AAPL', side=OrderSide.LONG, quantity=100, price=102.2)
        self.assertEqual(position.get_avg_price(), 102.2)
        position.update_avg_price(107, 150)
        position.update_quantity(150)
        self.assertEqual(position.get_quantity(), 250)
        self.assertEqual(position.get_avg_price(), 105.08)
        position.update_quantity(-125)
        self.assertEqual(position.get_quantity(), 125)
        self.assertEqual(position.get_avg_price(), 105.08)

        position = Position(symbol='AMZN', side=OrderSide.SHORT, quantity=100, price=92.5)
        self.assertEqual(position.get_avg_price(), 92.5)
        self.assertEqual(position.get_quantity(), 100)
        position.update_avg_price(90, 300)
        position.update_quantity(300)
        self.assertEqual(position.get_quantity(), 400)
        self.assertEqual(position.get_avg_price(), 90.625)
        position.update_quantity(-125)
        self.assertEqual(position.get_quantity(), 275)
        self.assertEqual(position.get_avg_price(), 90.625)
        position.update_avg_price(97, 200)
        position.update_quantity(200)
        self.assertEqual(position.get_quantity(), 475)
        self.assertEqual(position.get_avg_price(), 93.309)
    
    def test_account(self):
        self.assertIsNone(self.account.get_open_position('AMZN', OrderSide.LONG))
        self.assertIsNone(self.account.get_open_position('AAPL', OrderSide.SHORT))
        order1 = Order(symbol='AAPL', quantity=100, order_type=OrderType.LIMIT, side=OrderSide.SHORT, limit_price=102.2)
        self.account.update_buying_power(-(100 * 102.2)) # Simulate broker behavior since we are not actually calling from broker
        self.assertEqual(self.account.get_buying_power(), 89780)
        self.account.update_position(price=101.5, order=order1)
        position_apple_short = self.account.get_open_position('AAPL', OrderSide.SHORT)
        self.assertIsNotNone(position_apple_short)
        self.assertEqual(position_apple_short.get_quantity(), 100)
        self.assertEqual(position_apple_short.get_avg_price(), 101.5)
        self.assertEqual(position_apple_short.get_realized_profit(), 0)
        self.assertEqual(position_apple_short.get_unrealized_profit(), 0)
        self.assertEqual(position_apple_short.get_side(), OrderSide.SHORT)
        self.assertEqual(len(self.account.list_closed_positions()), 0)
        self.assertEqual(len(self.account.list_open_positions()), 1)
        self.assertEqual(self.account.get_balance(), 89850)
        self.assertEqual(self.account.get_buying_power(), 89850)
        
        order2 = Order(symbol='AMZN', quantity=200, order_type=OrderType.LIMIT, side=OrderSide.LONG, limit_price=95.5)
        self.account.update_position(price=95.5, order=order2)
        self.account.update_buying_power(-(200 * 95.5))
        self.assertEqual(self.account.get_buying_power(), 70750)
        position_amzn_long = self.account.get_open_position('AMZN', OrderSide.LONG)
        self.assertIsNotNone(position_amzn_long)
        self.assertEqual(position_amzn_long.get_quantity(), 200)
        self.assertEqual(position_amzn_long.get_avg_price(), 95.5)
        self.assertEqual(position_amzn_long.get_realized_profit(), 0)
        self.assertEqual(position_amzn_long.get_unrealized_profit(), 0)
        self.assertEqual(position_amzn_long.get_side(), OrderSide.LONG)
        self.assertEqual(len(self.account.list_closed_positions()), 0)
        self.assertEqual(len(self.account.list_open_positions()), 2)
        self.assertEqual(self.account.get_balance(), 70750)
        self.assertEqual(self.account.get_buying_power(), 70750)
        
        order3 = Order(symbol='AAPL', quantity=150, order_type=OrderType.LIMIT, side=OrderSide.SHORT, limit_price=100.2)
        self.account.update_buying_power(-(150 * 100.2))
        self.assertEqual(self.account.get_buying_power(), 55720)
        self.account.update_position(price=99.5, order=order3)
        position_apple_short = self.account.get_open_position('AAPL', OrderSide.SHORT)
        self.assertIsNotNone(position_apple_short)
        self.assertEqual(position_apple_short.get_quantity(), 250)
        self.assertEqual(position_apple_short.get_avg_price(), 100.3)
        self.assertEqual(position_apple_short.get_realized_profit(), 0)
        self.assertEqual(position_apple_short.get_unrealized_profit(), 0)
        self.assertEqual(position_apple_short.get_side(), OrderSide.SHORT)
        self.assertEqual(len(self.account.list_closed_positions()), 0)
        self.assertEqual(len(self.account.list_open_positions()), 2)
        self.assertEqual(self.account.get_balance(), 55825)
        self.assertEqual(self.account.get_buying_power(), 55825)
        
        order4 = Order(symbol='AAPL', quantity=-180, order_type=OrderType.STOP, side=OrderSide.SHORT, stop_price=95)
        self.assertEqual(self.account.get_buying_power(), 55825) # We won't update buying power until the stock is actually sold
        self.account.update_position(price=96, order=order4)
        position_apple_short = self.account.get_open_position('AAPL', OrderSide.SHORT)
        self.assertIsNotNone(position_apple_short)
        self.assertEqual(position_apple_short.get_quantity(), 70)
        self.assertEqual(position_apple_short.get_avg_price(), 100.3)
        self.assertEqual(position_apple_short.get_realized_profit(), 0)
        self.assertEqual(position_apple_short.get_unrealized_profit(), 0)
        self.assertEqual(position_apple_short.get_side(), OrderSide.SHORT)
        self.assertEqual(len(self.account.list_closed_positions()), 1)
        self.assertEqual(len(self.account.list_open_positions()), 2)
        closed_apple_short = self.account.get_closed_position('AAPL', OrderSide.SHORT)
        self.assertIsNotNone(closed_apple_short)
        self.assertEqual(closed_apple_short, list(self.account.list_closed_positions())[0])
        self.assertEqual(closed_apple_short.get_quantity(), 180)
        self.assertEqual(closed_apple_short.get_avg_price(), 0)
        self.assertEqual(closed_apple_short.get_realized_profit(), 774)
        self.assertEqual(closed_apple_short.get_unrealized_profit(), 0)
        self.assertEqual(closed_apple_short.get_side(), OrderSide.SHORT)
        self.assertEqual(self.account.get_balance(), 74653)
        self.assertEqual(self.account.get_buying_power(), 74653)
        
        order5 = Order(symbol='AMZN', quantity=-200, order_type=OrderType.STOP, side=OrderSide.LONG, stop_price=92.5)
        self.account.update_position(price=93, order=order5)
        position_amzn_long = self.account.get_open_position('AMZN', OrderSide.LONG)
        self.assertIsNone(position_amzn_long)
        self.assertEqual(len(self.account.list_closed_positions()), 2)
        self.assertEqual(len(self.account.list_open_positions()), 1)
        closed_amzn_long = self.account.get_closed_position('AMZN', OrderSide.LONG)
        self.assertEqual(closed_amzn_long.get_quantity(), 200)
        self.assertEqual(closed_amzn_long.get_avg_price(), 0)
        self.assertEqual(closed_amzn_long.get_realized_profit(), -500)
        self.assertEqual(closed_amzn_long.get_unrealized_profit(), 0)
        self.assertEqual(closed_amzn_long.get_side(), OrderSide.LONG)
        self.assertEqual(self.account.get_balance(), 93253)
        self.assertEqual(self.account.get_buying_power(), 93253)
        
        order6 = Order(symbol='AMZN', quantity=400, order_type=OrderType.LIMIT, side=OrderSide.LONG, limit_price=93.5)
        self.account.update_buying_power(-(400 * 93.5))
        self.assertEqual(self.account.get_buying_power(), 55853)
        self.account.update_position(price=93.2, order=order6)
        position_amzn_long = self.account.get_open_position('AMZN', OrderSide.LONG)
        self.assertIsNotNone(position_amzn_long)
        self.assertEqual(position_amzn_long.get_quantity(), 400)
        self.assertEqual(position_amzn_long.get_avg_price(), 93.2)
        self.assertEqual(position_amzn_long.get_realized_profit(), 0)
        self.assertEqual(position_amzn_long.get_unrealized_profit(), 0)
        self.assertEqual(position_amzn_long.get_side(), OrderSide.LONG)
        self.assertEqual(len(self.account.list_closed_positions()), 2)
        self.assertEqual(len(self.account.list_open_positions()), 2)
        self.assertEqual(self.account.get_balance(), 55973)
        self.assertEqual(self.account.get_buying_power(), 55973)
        
        order7 = Order(symbol='AMZN', quantity=-200, order_type=OrderType.STOP, side=OrderSide.LONG, stop_price=91.5)
        self.assertEqual(self.account.get_buying_power(), 55973)
        self.account.update_position(price=91, order=order7)
        position_amzn_long = self.account.get_open_position('AMZN', OrderSide.LONG)
        self.assertIsNotNone(position_amzn_long)
        self.assertEqual(len(self.account.list_closed_positions()), 2)
        self.assertEqual(len(self.account.list_open_positions()), 2)
        self.assertEqual(position_amzn_long.get_quantity(), 200)
        closed_amzn_long = self.account.get_closed_position('AMZN', OrderSide.LONG)
        self.assertEqual(closed_amzn_long.get_quantity(), 400)
        self.assertEqual(closed_amzn_long.get_avg_price(), 0)
        self.assertEqual(closed_amzn_long.get_realized_profit(), -940)
        self.assertEqual(closed_amzn_long.get_unrealized_profit(), 0)
        self.assertEqual(closed_amzn_long.get_side(), OrderSide.LONG)
        self.assertEqual(self.account.get_balance(), 74173)
        self.assertEqual(self.account.get_buying_power(), 74173)
        
        order8 = Order(symbol='AMZN', quantity=-200, order_type=OrderType.STOP, side=OrderSide.LONG, stop_price=102.5)
        self.account.update_position(price=102.6, order=order8)
        position_amzn_long = self.account.get_open_position('AMZN', OrderSide.LONG)
        self.assertIsNone(position_amzn_long)
        self.assertEqual(len(self.account.list_closed_positions()), 2)
        self.assertEqual(len(self.account.list_open_positions()), 1)
        closed_amzn_long = self.account.get_closed_position('AMZN', OrderSide.LONG)
        self.assertEqual(closed_amzn_long.get_quantity(), 600)
        self.assertEqual(closed_amzn_long.get_avg_price(), 0)
        self.assertEqual(closed_amzn_long.get_realized_profit(), 940)
        self.assertEqual(closed_amzn_long.get_unrealized_profit(), 0)
        self.assertEqual(closed_amzn_long.get_side(), OrderSide.LONG)
        self.assertEqual(self.account.get_balance(), 94693)
        self.assertEqual(self.account.get_buying_power(), 94693)
        
        order9 = Order(symbol='AAPL', quantity=-70, order_type=OrderType.STOP, side=OrderSide.SHORT, stop_price=105.2)
        self.account.update_position(price=105.1, order=order9)
        position_apple_short = self.account.get_open_position('AAPL', OrderSide.SHORT)
        self.assertIsNone(position_apple_short)
        self.assertEqual(len(self.account.list_closed_positions()), 2)
        self.assertEqual(len(self.account.list_open_positions()), 0)
        closed_amzn_long = self.account.get_closed_position('AAPL', OrderSide.SHORT)
        self.assertEqual(closed_amzn_long.get_quantity(), 250)
        self.assertEqual(closed_amzn_long.get_avg_price(), 0)
        self.assertEqual(closed_amzn_long.get_realized_profit(), 438)
        self.assertEqual(closed_amzn_long.get_unrealized_profit(), 0)
        self.assertEqual(closed_amzn_long.get_side(), OrderSide.SHORT)
        self.assertEqual(self.account.get_balance(), 101378)
        self.assertEqual(self.account.get_buying_power(), 101378)
        
        order10 = Order(symbol='AAPL', quantity=400, order_type=OrderType.LIMIT, side=OrderSide.LONG, limit_price=93.5)
        self.account.update_buying_power(-(400 * 93.5))
        self.assertEqual(self.account.get_buying_power(), 63978)
        self.account.update_position(price=93.5, order=order10)
        position_apple_long = self.account.get_open_position('AAPL', OrderSide.LONG)
        self.assertIsNotNone(position_apple_long)
        self.assertEqual(position_apple_long.get_quantity(), 400)
        self.assertEqual(position_apple_long.get_avg_price(), 93.5)
        self.assertEqual(position_apple_long.get_realized_profit(), 0)
        self.assertEqual(position_apple_long.get_unrealized_profit(), 0)
        self.assertEqual(position_apple_long.get_side(), OrderSide.LONG)
        self.assertEqual(len(self.account.list_closed_positions()), 2)
        self.assertEqual(len(self.account.list_open_positions()), 1)
        self.assertEqual(self.account.get_balance(), 63978)
        self.assertEqual(self.account.get_buying_power(), 63978)
        
        order11 = Order(symbol='AAPL', quantity=-400, order_type=OrderType.STOP, side=OrderSide.LONG, stop_price=102.5)
        self.account.update_position(price=102.6, order=order11)
        position_apple_long = self.account.get_open_position('AAPL', OrderSide.LONG)
        self.assertIsNone(position_apple_long)
        self.assertEqual(len(self.account.list_closed_positions()), 3)
        self.assertEqual(len(self.account.list_open_positions()), 0)
        closed_aaple_long = self.account.get_closed_position('AAPL', OrderSide.LONG)
        self.assertEqual(closed_aaple_long.get_quantity(), 400)
        self.assertEqual(closed_aaple_long.get_avg_price(), 0)
        self.assertEqual(closed_aaple_long.get_realized_profit(), 3640)
        self.assertEqual(closed_aaple_long.get_unrealized_profit(), 0)
        self.assertEqual(closed_aaple_long.get_side(), OrderSide.LONG)
        self.assertEqual(self.account.get_balance(), 105018)
        self.assertEqual(self.account.get_buying_power(), 105018)

if __name__ == '__main__':
    unittest.main()